{"ast":null,"code":"import { makeAutoObservable } from \"mobx\";\n\nclass CanvasState {\n  constructor() {\n    this.canvas = null;\n    this.socket = null;\n    this.sessionid = null;\n    this.undoList = [];\n    this.redoList = [];\n    this.username = \"\";\n    makeAutoObservable(this);\n  }\n\n  setSessionId(id) {\n    this.sessionid = id;\n  }\n\n  setSocket(socket) {\n    this.socket = socket;\n  }\n\n  setUsername(username) {\n    this.username = username;\n  }\n\n  setCanvas(canvas) {\n    this.canvas = canvas;\n  }\n\n  pushToUndo(data) {\n    this.undoList.push(data);\n  }\n\n  pushToRedo(data) {\n    this.redoList.push(data);\n  }\n\n  undo() {\n    let ctx = this.canvas.getContext('2d');\n\n    if (this.undoList.length > 0) {\n      let dataUrl = this.undoList.pop();\n      this.redoList.push(this.canvas.toDataURL());\n      let img = new Image();\n      img.src = dataUrl;\n\n      img.onload = () => {\n        ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n        ctx.drawImage(img, 0, 0, this.canvas.width, this.canvas.height);\n      };\n    } else {\n      ctx.clearRect(0, 0, this.canvas.width, this.canvas.heigth);\n    }\n  }\n\n  redo() {\n    let ctx = this.canvas.getContext('2d');\n\n    if (this.redoList.length > 0) {\n      let dataUrl = this.redoList.pop();\n      this.undoList.push(this.canvas.toDataURL());\n      let img = new Image();\n      img.src = dataUrl;\n\n      img.onload = () => {\n        ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n        ctx.drawImage(img, 0, 0, this.canvas.width, this.canvas.height);\n      };\n    }\n  }\n\n}\n\nexport default new CanvasState();","map":{"version":3,"sources":["/home/seu/projects/online_paint/Fullstack-websocket-paint/client/src/store/canvasState.js"],"names":["makeAutoObservable","CanvasState","constructor","canvas","socket","sessionid","undoList","redoList","username","setSessionId","id","setSocket","setUsername","setCanvas","pushToUndo","data","push","pushToRedo","undo","ctx","getContext","length","dataUrl","pop","toDataURL","img","Image","src","onload","clearRect","width","height","drawImage","heigth","redo"],"mappings":"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","sourcesContent":["import {makeAutoObservable} from \"mobx\";\n\nclass CanvasState {\n    canvas = null\n    socket = null\n    sessionid = null\n    undoList = []\n    redoList = []\n    username = \"\"\n\n    constructor() {\n        makeAutoObservable(this)\n    }\n\n    setSessionId(id) {\n        this.sessionid = id\n    }\n    setSocket(socket) {\n        this.socket = socket\n    }\n\n    setUsername(username) {\n        this.username = username\n    }\n\n    setCanvas(canvas) {\n        this.canvas = canvas\n    }\n\n    pushToUndo(data) {\n        this.undoList.push(data)\n    }\n\n    pushToRedo(data) {\n        this.redoList.push(data)\n    }\n\n    undo() {\n        let ctx = this.canvas.getContext('2d')\n        if (this.undoList.length > 0) {\n            let dataUrl = this.undoList.pop()\n            this.redoList.push(this.canvas.toDataURL())\n            let img = new Image()\n            img.src = dataUrl\n            img.onload =  () => {\n                ctx.clearRect(0,0, this.canvas.width, this.canvas.height)\n                ctx.drawImage(img, 0, 0, this.canvas.width, this.canvas.height)\n            }\n        } else {\n            ctx.clearRect(0, 0, this.canvas.width, this.canvas.heigth)\n        }\n    }\n\n    redo() {\n        let ctx = this.canvas.getContext('2d')\n        if (this.redoList.length > 0) {\n            let dataUrl = this.redoList.pop()\n            this.undoList.push(this.canvas.toDataURL())\n            let img = new Image()\n            img.src = dataUrl\n            img.onload =  () => {\n                ctx.clearRect(0,0, this.canvas.width, this.canvas.height)\n                ctx.drawImage(img, 0, 0, this.canvas.width, this.canvas.height)\n            }\n        }\n    }\n\n}\n\nexport default new CanvasState()\n"]},"metadata":{},"sourceType":"module"}